version: '3'

volumes:
  production_postgres_data: {}
  production_postgres_data_backups: {}
  production_traefik: {}

services:
  django: &django
    restart: always
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile
    image: "${DOCKER_REGISTRY}/mmpl_backend_django:${BUILD_VERSION}"
    depends_on:
      - postgres
      - redis
    env_file:
      - "${DJANGO_SECRETS_PATH}"
      - "${POSTGRES_SECRETS_PATH}"
    command: /start

  postgres:
    restart: always
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: "${DOCKER_REGISTRY}/mmpl_backend_postgres:${BUILD_VERSION}"
    volumes:
      - production_postgres_data:/var/lib/postgresql/data
      - production_postgres_data_backups:/backups
    env_file:
      - "${POSTGRES_SECRETS_PATH}"

  traefik:
    restart: always
    build:
      context: .
      dockerfile: ./compose/production/traefik/Dockerfile
    image: "${DOCKER_REGISTRY}/mmpl_backend_traefik:${BUILD_VERSION}"
    depends_on:
      - django
    volumes:
      - production_traefik:/etc/traefik/acme
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"

  redis:
    restart: always
    image: redis:5.0

  celeryworker:
    restart: always
    <<: *django
    image: "${DOCKER_REGISTRY}/mmpl_backend_celeryworker:${BUILD_VERSION}"
    command: /start-celeryworker

  celerybeat:
    restart: always
    <<: *django
    image: "${DOCKER_REGISTRY}/mmpl_backend_celerybeat:${BUILD_VERSION}"
    command: /start-celerybeat

  flower:
    restart: always
    <<: *django
    image: "${DOCKER_REGISTRY}/mmpl_backend_flower:${BUILD_VERSION}"
    ports:
      - "5555:5555"
    command: /start-flower

  
  awscli:
    build:
      context: .
      dockerfile: ./compose/production/aws/Dockerfile
    image: "${DOCKER_REGISTRY}/mmpl_backend_awscli:${BUILD_VERSION}"
    env_file:
      - "${DJANGO_SECRETS_PATH}"
    volumes:
      - production_postgres_data_backups:/backups
